from lexer import Token

first = {
    'function': [ Token.FLOAT, Token.INT ],
    'arg_list': [ Token.FLOAT, Token.INT ],
    'arg': [ Token.FLOAT, Token.INT ],
    'resto_arg_list': [ Token.VIRGULA ],
    'type': [ Token.FLOAT, Token.INT ],
    'bloco': [ Token.ABRECHAVE ],
    'stmt_list': [ Token.NOT, Token.ABREPAR, Token.SOMA, 
        Token.SUBT, Token.PTOEVIRGULA, Token.IDENT, Token.NUMFLOAT, Token.NUMINT,
        Token.BREAK, Token.CONTINUE, Token.FLOAT, Token.FOR, Token.IF, Token.INT,
        Token.PRINT, Token.SCAN, Token.WHILE, Token.ABRECHAVE ],
    'stmt': [ Token.NOT, Token.ABREPAR, Token.SOMA, 
        Token.SUBT, Token.PTOEVIRGULA, Token.IDENT, Token.NUMFLOAT, Token.NUMINT,
        Token.BREAK, Token.CONTINUE, Token.FLOAT, Token.FOR, Token.IF, Token.INT,
        Token.PRINT, Token.SCAN, Token.WHILE, Token.ABRECHAVE, Token.RETURN ],
    'declaration': [ Token.FLOAT, Token.INT ],
    'ident_list': [ Token.IDENT ],
    'resto_ident_list': [ Token.VIRGULA ],
    'for_stmt': [ Token.FOR ],
    'opt_expr': [ Token.NOT, Token.ABREPAR, Token.SOMA, Token.SUBT, Token.IDENT,
        Token.NUMFLOAT, Token.NUMINT ],
    'io_stmt': [ Token.PRINT, Token.SCAN ],
    'out_list': [ Token.IDENT, Token.NUMFLOAT, Token.NUMINT, Token.STRING ],
    'resto_out_list': [ Token.IDENT, Token.NUMFLOAT, Token.NUMINT, Token.STRING ],
    'while_stmt': [ Token.WHILE ],
    'if_stmt': [ Token.IF ],
    'else_part': [ Token.ELSE ],
    'expr': [ Token.NOT, Token.ABREPAR, Token.SOMA, Token.SUBT, Token.IDENT,
        Token.NUMFLOAT, Token.NUMINT ],
    'atrib': [ Token.NOT, Token.ABREPAR, Token.SOMA, Token.SUBT, Token.IDENT,
        Token.NUMFLOAT, Token.NUMINT ],
    'resto_atrib': [ Token.ATRIB ],
    'or': [ Token.NOT, Token.ABREPAR, Token.SOMA, Token.SUBT, Token.IDENT,
        Token.NUMFLOAT, Token.NUMINT ],
    'resto_or': [ Token.OR ],
    'and': [ Token.NOT, Token.ABREPAR, Token.SOMA, Token.SUBT, Token.IDENT,
        Token.NUMFLOAT, Token.NUMINT ],
    'resto_and': [ Token.AND ],
    'not': [ Token.NOT, Token.ABREPAR, Token.SOMA, Token.SUBT, Token.IDENT,
        Token.NUMFLOAT, Token.NUMINT ],
    'rel': [ Token.ABREPAR, Token.SOMA, Token.SUBT, Token.IDENT,
        Token.NUMFLOAT, Token.NUMINT ],
    'resto_rel': [ Token.DIFF, Token.LT, Token.GT, Token.LTEQ, Token.GTEQ,
        Token.EQUAL ],
    'add': [ Token.ABREPAR, Token.SOMA, Token.SUBT, Token.IDENT,
        Token.NUMFLOAT, Token.NUMINT ],
    'resto_add': [ Token.SOMA, Token.SUBT ],
    'mult': [ Token.ABREPAR, Token.SOMA, Token.SUBT, Token.IDENT,
        Token.NUMFLOAT, Token.NUMINT ],
    'resto_mult': [ Token.MODU, Token.MULT, Token.DIV ],
    'uno': [ Token.ABREPAR, Token.SOMA, Token.SUBT, Token.IDENT,
        Token.NUMFLOAT, Token.NUMINT ],
    'fator': [ Token.ABREPAR, Token.IDENT, Token.NUMFLOAT, Token.NUMINT ],
}